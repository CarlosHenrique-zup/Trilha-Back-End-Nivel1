package br.com.zup.estrelas.cliente.service.impl;

import java.util.Optional;

import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.BeanUtils;

import br.com.zup.estrelas.cliente.dto.ClienteDTO;
import br.com.zup.estrelas.cliente.dto.MensagemDTO;
import br.com.zup.estrelas.cliente.entity.ClienteEntity;
import br.com.zup.estrelas.cliente.repository.ClienteRepository;

@RunWith(MockitoJUnitRunner.class)
public class ClienteServiceTests {

	private static final String CLIENTE_CADASTRADO_COM_SUCESSO = "Cliente cadastrado com sucesso!";
	private static final String CLIENTE_INEXISTENTE = "Cliente inexistente!";
	private static final String CLIENTE_REMOVIDO_COM_SUCESSO = "Cliente removido com sucesso!";
	private static final String CLIENTE_JA_EXISTENTE = "Cliente j√° existente!";
	private static final String CLIENTE_ALTERADO_COM_SUCESSO = "Cliente alterado com sucesso!";

	@Mock
	ClienteRepository clienteReository;

	@InjectMocks
	ClienteServiceImpl clienteService;

	private ClienteDTO implementarCliente() {
		ClienteDTO cliente = new ClienteDTO();
		cliente.setCpf("34234234244");
		cliente.setNome("Fernando");
		cliente.setIdade(10);
		cliente.setEmail("Fernando2020@gmail.com.br");
		cliente.setEndereco("Rua Moreira Pires");

		return cliente;
	}

	@Test
	public void deveAdicionarClienteComSucesso() {
		ClienteDTO cliente = implementarCliente();

		Mockito.when(clienteReository.existsByCpf(cliente.getCpf())).thenReturn(false);

		MensagemDTO mensagemRetornada = this.clienteService.adicionarCliente(cliente);
		MensagemDTO mensagemEsperada = new MensagemDTO(CLIENTE_CADASTRADO_COM_SUCESSO);

		Assert.assertEquals("Deve criar uma cliente com sucesso", mensagemEsperada, mensagemRetornada);
	}



}
